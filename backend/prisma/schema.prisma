generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StakeholderRole {
  FARMER
  DISTRIBUTOR
  RETAILER
  CONSUMER
  QUALITY_INSPECTOR
}

enum ProductStatus {
  PRODUCED
  IN_TRANSIT
  DELIVERED
  SOLD
  EXPIRED
}

enum QualityGrade {
  A
  B
  C
  REJECTED
}

enum CertificationType {
  ORGANIC
  FAIR_TRADE
  NON_GMO
  PESTICIDE_FREE
  SUSTAINABLE
}

model Stakeholder {
  id               String          @id @default(cuid())
  walletAddress    String          @unique
  role             StakeholderRole
  name             String
  email            String?         @unique
  phone            String?
  isVerified       Boolean         @default(false)
  registrationDate DateTime        @default(now())

  // Profile details
  profileImage   String?
  description    String?
  location       String?
  gpsCoordinates Json? // {lat: number, lng: number}

  // Business details
  businessName    String?
  businessLicense String?
  taxId           String?

  // Hash stored on blockchain
  dataHash String?

  // Relations
  farmedBatches            ProductBatch[]    @relation("FarmerBatches")
  ownedBatches             ProductBatch[]    @relation("OwnerBatches")
  sentTransactions         Transaction[]     @relation("SentTransactions")
  receivedTransactions     Transaction[]     @relation("ReceivedTransactions")
  sentPartialTransfers     PartialTransfer[] @relation("SentPartialTransfers")
  receivedPartialTransfers PartialTransfer[] @relation("ReceivedPartialTransfers")
  qualityReports           QualityReport[]
  certifications           Certification[]

  @@map("stakeholders")
}

model ProductBatch {
  id             String  @id @default(cuid())
  batchId        Int     @unique // Maps to blockchain batch ID
  blockchainHash String? // Transaction hash when created on blockchain

  // Basic product info
  productType String
  variety     String?
  quantity    Decimal // in kg
  unit        String  @default("kg")

  // Dates
  harvestDate DateTime
  expiryDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Status and quality
  status       ProductStatus @default(PRODUCED)
  qualityGrade QualityGrade  @default(A)

  // Pricing
  basePrice Decimal // price per unit in local currency
  currency  String  @default("INR")

  // Relationships
  farmerId       String
  farmer         Stakeholder @relation("FarmerBatches", fields: [farmerId], references: [id])
  currentOwnerId String
  currentOwner   Stakeholder @relation("OwnerBatches", fields: [currentOwnerId], references: [id])

  // Detailed information (hashed on blockchain)
  originData           OriginData?
  qualityReports       QualityReport[]
  transactions         Transaction[]
  partialTransfer      PartialTransfer[]
  fromPartialTransfers PartialTransfer[]    @relation("FromBatch")
  toPartialTransfers   PartialTransfer[]    @relation("ToBatch")
  batchGenealogy       BatchGenealogy[]
  certifications       BatchCertification[]
  storageInfo          StorageInfo[]

  // Hashes stored on blockchain
  originHash  String?
  qualityHash String?

  @@map("product_batches")
}

// Batch genealogy tracking for complex hierarchies
model BatchGenealogy {
  id      String       @id @default(cuid())
  batchId String       @unique
  batch   ProductBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  originalBatchId String // Root batch ID (the first batch in the chain)
  parentBatchId   String? // Direct parent batch

  // Hierarchy level (0 = original, 1 = first split, 2 = second level split, etc.)
  hierarchyLevel Int @default(0)

  // Path from root to this batch (e.g., "1/5/12" means original->split->split)
  hierarchyPath String

  createdAt DateTime @default(now())

  @@map("batch_genealogy")
}

model OriginData {
  id      String       @id @default(cuid())
  batchId String       @unique
  batch   ProductBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  // Farm details
  farmName       String
  farmAddress    String
  gpsCoordinates Json // {lat: number, lng: number}
  farmSize       Decimal? // in acres/hectares

  // Soil and environment
  soilType    String?
  soilPH      Decimal?
  climate     String?
  waterSource String?

  // Farming practices
  seedVariety      String?
  plantingMethod   String?
  irrigationMethod String?
  fertilizers      Json? // Array of fertilizers used
  pesticides       Json? // Array of pesticides used
  harvestMethod    String?

  // Weather data during growing season
  weatherData Json?

  createdAt DateTime @default(now())

  @@map("origin_data")
}

model QualityReport {
  id      String       @id @default(cuid())
  batchId String
  batch   ProductBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  inspectorId String
  inspector   Stakeholder @relation(fields: [inspectorId], references: [id])

  // Quality metrics
  grade      QualityGrade
  appearance String? // Description
  texture    String?
  taste      String?
  aroma      String?

  // Scientific measurements
  moistureContent Decimal? // percentage
  sugarContent    Decimal? // brix/percentage
  acidity         Decimal? // pH

  // Safety tests
  pesticideResidue Json? // Test results
  heavyMetals      Json? // Test results
  microbiological  Json? // Test results

  // Additional notes
  notes  String?
  images Json? // Array of image URLs

  reportDate DateTime  @default(now())
  expiryDate DateTime? // When this report expires

  // Blockchain hash
  reportHash String?

  @@map("quality_reports")
}

// New model for tracking partial transfers specifically
model PartialTransfer {
  id String @id @default(cuid())

  // Batch relationships
  fromBatchId String
  fromBatch   ProductBatch @relation("FromBatch", fields: [fromBatchId], references: [id], onDelete: Cascade)
  toBatchId   String
  toBatch     ProductBatch @relation("ToBatch", fields: [toBatchId], references: [id], onDelete: Cascade)

  // Stakeholder relationships
  fromId String
  from   Stakeholder @relation("SentPartialTransfers", fields: [fromId], references: [id])
  toId   String
  to     Stakeholder @relation("ReceivedPartialTransfers", fields: [toId], references: [id])

  // Transfer details
  quantity     Decimal // Amount being transferred
  pricePerUnit Decimal
  totalPrice   Decimal
  currency     String  @default("INR")

  // Transaction metadata
  transferDate DateTime @default(now())
  transferType String   @default("PARTIAL_SALE") // "PARTIAL_SALE", "PARTIAL_TRANSFER"

  // Blockchain reference
  blockchainTxHash String? // Ethereum transaction hash
  transactionHash  String? // Hash of this transfer data

  // Location and conditions
  location       String?
  gpsCoordinates Json?
  notes          String?
  ProductBatch   ProductBatch? @relation(fields: [productBatchId], references: [id])
  productBatchId String?

  @@map("partial_transfers")
}

model Transaction {
  id      String       @id @default(cuid())
  batchId String
  batch   ProductBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  fromId String
  from   Stakeholder @relation("SentTransactions", fields: [fromId], references: [id])
  toId   String
  to     Stakeholder @relation("ReceivedTransactions", fields: [toId], references: [id])

  // Transaction details
  transactionType String // "SALE", "TRANSFER", "RETURN"
  quantity        Decimal // Amount being transferred
  pricePerUnit    Decimal
  totalPrice      Decimal
  currency        String  @default("INR")

  // Payment details
  paymentMethod String? // "CASH", "BANK_TRANSFER", "CRYPTO"
  paymentStatus String  @default("PENDING") // "PENDING", "COMPLETED", "FAILED"
  paymentRef    String? // Reference number

  // Location and timing
  transactionDate DateTime  @default(now())
  deliveryDate    DateTime?
  location        String?
  gpsCoordinates  Json?

  // Transport details
  transportMethod String? // "TRUCK", "RAIL", "AIR", "SHIP"
  vehicleNumber   String?
  driverDetails   Json?

  // Documents
  invoice   String? // URL to invoice
  receipt   String? // URL to receipt
  documents Json? // Array of document URLs

  // Notes and conditions
  notes      String?
  conditions String? // Special conditions for the transaction

  // Blockchain data
  blockchainTxHash String? // Ethereum transaction hash
  transactionHash  String? // Hash of this transaction data stored on blockchain

  @@map("transactions")
}

model Certification {
  id            String      @id @default(cuid())
  stakeholderId String
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  type              CertificationType
  certifyingBody    String // Name of certifying organization
  certificateNumber String            @unique

  issuedDate DateTime
  expiryDate DateTime
  isValid    Boolean  @default(true)

  // Certificate details
  scope      String? // What this certificate covers
  standards  Json? // Array of standards met
  conditions String? // Any conditions or limitations

  // Documents
  certificateUrl String? // URL to certificate document

  batchCertifications BatchCertification[]

  @@map("certifications")
}

model BatchCertification {
  id              String        @id @default(cuid())
  batchId         String
  batch           ProductBatch  @relation(fields: [batchId], references: [id], onDelete: Cascade)
  certificationId String
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  appliedDate  DateTime  @default(now())
  verifiedDate DateTime?
  isVerified   Boolean   @default(false)

  @@unique([batchId, certificationId])
  @@map("batch_certifications")
}

model StorageInfo {
  id      String       @id @default(cuid())
  batchId String
  batch   ProductBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  facilityName   String
  facilityType   String // "WAREHOUSE", "COLD_STORAGE", "SILO"
  location       String
  gpsCoordinates Json?

  // Storage conditions
  temperature Decimal? // in Celsius
  humidity    Decimal? // percentage
  atmosphere  String? // "CONTROLLED_ATMOSPHERE", "MODIFIED_ATMOSPHERE"

  // Duration
  storageStartDate DateTime
  storageEndDate   DateTime?

  // Quality during storage
  qualityAtEntry String?
  qualityAtExit  String?
  losses         Decimal? // percentage/quantity lost

  // Monitoring data
  monitoringData Json? // Array of monitoring records

  notes String?

  @@map("storage_info")
}

model AuditLog {
  id String @id @default(cuid())

  // What was changed
  entityType String // "BATCH", "STAKEHOLDER", "TRANSACTION"
  entityId   String // ID of the changed entity
  action     String // "CREATE", "UPDATE", "DELETE"
  changes    Json // What fields were changed

  // Who made the change
  userId      String? // Stakeholder ID who made the change
  userAddress String? // Wallet address

  // When and where
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  // Blockchain reference
  blockchainTxHash String?

  @@map("audit_logs")
}

model QRCode {
  id         String  @id @default(cuid())
  batchId    String  @unique
  qrCodeData String // The QR code content
  qrCodeUrl  String? // URL to QR code image

  generatedAt DateTime @default(now())
  isActive    Boolean  @default(true)

  // Analytics
  scans QRScan[]

  @@map("qr_codes")
}

model QRScan {
  id       String @id @default(cuid())
  qrCodeId String
  qrCode   QRCode @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  scannedAt      DateTime @default(now())
  scannerType    String? // "CONSUMER", "RETAILER", "INSPECTOR"
  location       String?
  gpsCoordinates Json?
  ipAddress      String?
  userAgent      String?

  @@map("qr_scans")
}

// System configuration and settings
model SystemConfig {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?

  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Price history for market analysis
model PriceHistory {
  id          String  @id @default(cuid())
  productType String
  variety     String?
  location    String // Market location

  date         DateTime
  pricePerUnit Decimal
  currency     String   @default("INR")
  unit         String   @default("kg")

  // Market data
  marketName String?
  source     String? // Where this price data came from
  quality    String? // Quality grade this price applies to

  @@map("price_history")
}

// Indexes for better performance (optimized for batch splitting queries)
// Add these as comments for reference when setting up the database

// Original indexes
// CREATE INDEX idx_product_batches_farmer_id ON product_batches(original_farmer_id);
// CREATE INDEX idx_product_batches_current_owner ON product_batches(current_owner_id);
// CREATE INDEX idx_product_batches_status ON product_batches(status);
// CREATE INDEX idx_product_batches_harvest_date ON product_batches(harvest_date);
// CREATE INDEX idx_product_batches_is_active ON product_batches(is_active);

// Batch hierarchy indexes
// CREATE INDEX idx_product_batches_parent_id ON product_batches(parent_batch_id);
// CREATE INDEX idx_batch_genealogy_original_batch ON batch_genealogy(original_batch_id);
// CREATE INDEX idx_batch_genealogy_parent_batch ON batch_genealogy(parent_batch_id);
// CREATE INDEX idx_batch_genealogy_hierarchy_level ON batch_genealogy(hierarchy_level);

// Transfer indexes
// CREATE INDEX idx_transactions_batch_id ON transactions(batch_id);
// CREATE INDEX idx_transactions_date ON transactions(transaction_date);
// CREATE INDEX idx_partial_transfers_from_batch ON partial_transfers(from_batch_id);
// CREATE INDEX idx_partial_transfers_to_batch ON partial_transfers(to_batch_id);
// CREATE INDEX idx_partial_transfers_date ON partial_transfers(transfer_date);

// Quality and other indexes
// CREATE INDEX idx_quality_reports_batch_id ON quality_reports(batch_id);
// CREATE INDEX idx_stakeholders_wallet_address ON stakeholders(wallet_address);
// CREATE INDEX idx_stakeholders_role ON stakeholders(role);

// Composite indexes for complex queries
// CREATE INDEX idx_batches_active_owner ON product_batches(is_active, current_owner_id);
// CREATE INDEX idx_batches_status_owner ON product_batches(status, current_owner_id);
// CREATE INDEX idx_genealogy_original_level ON batch_genealogy(original_batch_id, hierarchy_level);
